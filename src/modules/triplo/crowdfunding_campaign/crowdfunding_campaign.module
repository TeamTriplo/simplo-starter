<?php

/*
 * Implements hook_cron()
 */

function crowdfunding_campaign_cron() {

    global $user;
    $available_offers = get_crowdfunding_offer_list();
    foreach($available_offers as $offer){
      if (!empty($offer->field_sppx_uuid)){
        $sppx_uuid = $offer->field_sppx_uuid['und'][0]['value'];
        $uri = "https://test.sppx.io/api/v0/issue/".$sppx_uuid;
        $response = backdrop_http_request($uri);
        if ($response->data){
          $data = json_decode($response->data, TRUE);
          $issue = $data['issue'];
          update_crowdfunding_offer($offer, $issue);
        }

      }
    }
}

/**
* Implements hook_menu().
*/
function crowdfunding_campaign_menu() {
  $items['sppx-logout'] = array(
    'page callback' => 'logout_sppx_session',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  $items['sppx-check-token-status'] = array(
    'page callback' => 'check_sppx_access_token_status',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  // SPPX Invest 
  $items['sppx-pledge/%'] = array(
    'page callback' => 'pledge_sppx_invest',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  return $items;
}



/** 
 * Update Offers with current JSON feed data 
 * @parameter : $offer crowdfunding offer to be updated
 * @parameter : $issue coming from sppx through API as JSON
*/

function update_crowdfunding_offer(&$offer, $issue){

  // Get field values from JSON and update offer
  if (!empty($issue)){
    $title = $issue['name'];
    $id = $issue['id'];
    $uuid = $issue['uuid'];
    $visibility = $issue['visibility'];
    $forum_link = $issue['links']['forum'];
    $issue_link = $issue['links']['website'];
    $portal_link = $issue['links']['portal'];
    $thumbnail_link =  $issue['media']['thumb'];
    $type = $issue['raise']['type'];
    $rule = $issue['raise']['rule'];
    $raise_minimum = $issue['raise']['minimum'];
    $raise_maximum = $issue['raise']['maximum'];
    $raise_target = $issue['raise']['target'];
    $raised = $issue['raise']['raised'];
    $invest = $issue['raise']['invest'];
    $lotsize = $issue['raise']['lotsize'];
    $request = $issue['raise']['request'];
    $status = $issue['raise']['status'];
    $accredited = $issue['raise']['accredited'];
    $reviewed = $issue['raise']['reviewed'];
    $date_start = $issue['dates']['start'];
    $date_end = $issue['dates']['end'];
    $date_target = $issue['dates']['target'];
    $caveat_copyright = $issue['caveat']['copyright'];
    $caveat_warning = $issue['caveat']['warning'];
    $teaser = $issue['page']['teaser'];
    // Get specific crowdfunding offer node id to be updated
    $nid = $offer->nid;
    $node = node_load($nid);                               
    $node->language = LANGUAGE_NONE;                                               
    $node->uid = 1;                                                                
    $node->status = 1;                                                             
    $node->promote = 0;                                                            
    $node->comment = 0;
    // Update Field data 
    $node->field_issue_name['und'][0]['value'] = $title;
    $node->field_sppx_id['und'][0]['value'] = $id;
    $node->field_sppx_uuid['und'][0]['value'] = $uuid;
    $node->field_forum_link['und'][0]['value'] = $forum_link;
    $node->field_issue_link['und'][0]['value'] = $issue_link;
    $node->field_portal_link['und'][0]['value'] = $portal_link;
    $node->field_thumbnail_link['und'][0]['title'] = $title;
    $node->field_thumbnail_link['und'][0]['url'] = $thumbnail_link;
    $node->field_type['und'][0]['value'] = $type;
    $node->field_rule['und'][0]['value'] = $rule;
    $node->field_raise_minimum['und'][0]['value'] = $raise_minimum;
    $node->field_raise_maximum['und'][0]['value'] = $raise_maximum;
    $node->field_raise_target['und'][0]['value'] = $raise_target;
    $node->field_raised['und'][0]['value'] = $raised;
    $node->field_invest['und'][0]['value'] = $invest;
    $node->field_lotsize['und'][0]['value'] = $lotsize;
    $node->field_request['und'][0]['value'] = $request;
    $node->field_status['und'][0]['value'] = $status;
    $node->field_start_date['und'][0]['value'] = $date_start; //date('Y-m-d h:i:s', strtotime($date_start));
    $node->field_end_date['und'][0]['value'] = $date_end;//date('Y-m-d h:i:s', strtotime($date_end));
    $node->field_target_date['und'][0]['value'] = $date_target;//date('Y-m-d h:i:s', strtotime($date_target));
    $node->field_caveat_copyright['und'][0]['value'] = base64_decode($caveat_copyright);
    $node->field_caveat_warning['und'][0]['value'] = base64_decode($caveat_warning);
    $node->field_teaser['und'][0]['value'] = base64_decode($teaser);
    $node->field_accredited['und'][0]['value'] = $accredited;
    $node->field_reviewed['und'][0]['value'] = $reviewed;     
    $node->field_visibility['und'][0]['value'] = $visibility;     

    field_attach_presave('node', $node);
    field_attach_update('node', $node);
    entity_get_controller('node')->resetCache(array($node->nid));
                                        
  }
}

/**  
 * Get List of Crowdfunding Offer available currently
*/
function get_crowdfunding_offer_list(){

  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'campaign')
    ->execute();
  $nodes = node_load_multiple(array_keys($result['node']));
  return $nodes;
}



/**
 * Implements hook_theme_registry_alter().
 */
function crowdfunding_campaign_theme_registry_alter(&$theme_registry) {

  // Defined path to the current module's 'templates' directory.
  $module_path = backdrop_get_path('module', 'crowdfunding_campaign') . '/templates';

  // Find all *.tpl.php files in this module's 'templates' folder recursively.
  $template_file_objects = backdrop_find_theme_templates($theme_registry, '.tpl.php', $module_path);

  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme...
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

/**
 * Implements hook_node_presave()
 *  Assign API data to the node we are going to save
 */

function crowdfunding_campaign_node_presave(Node $node) {

  if($node->type == 'campaign' && empty($node->nid)){
    if (!empty($node->field_sppx_uuid)){
      $sppx_uuid = $node->field_sppx_uuid['und'][0]['value'];
      $uri = "https://test.sppx.io/api/v0/issue/".$sppx_uuid;
      $response = backdrop_http_request($uri);
      if ($response->data){
        $data = json_decode($response->data, TRUE);
        $issue = $data['issue'];
        if (!empty($issue)){
          $title = $issue['name'];
          $id = $issue['id'];
          $uuid = $issue['uuid'];
          $visibility = $issue['visibility'];
          $forum_link = $issue['links']['forum'];
          $issue_link = $issue['links']['website'];
          $portal_link = $issue['links']['portal'];
          $thumbnail_link =  $issue['media']['thumb'];
          $type = $issue['raise']['type'];
          $rule = $issue['raise']['rule'];
          $raise_minimum = $issue['raise']['minimum'];
          $raise_maximum = $issue['raise']['maximum'];
          $raise_target = $issue['raise']['target'];
          $raised = $issue['raise']['raised'];
          $invest = $issue['raise']['invest'];
          $lotsize = $issue['raise']['lotsize'];
          $request = $issue['raise']['request'];
          $status = $issue['raise']['status'];
          $accredited = $issue['raise']['accredited'];
          $reviewed = $issue['raise']['reviewed'];
          $date_start = $issue['dates']['start'];
          $date_end = $issue['dates']['end'];
          $date_target = $issue['dates']['target'];
          $caveat_copyright = $issue['caveat']['copyright'];
          $caveat_warning = $issue['caveat']['warning'];
          $teaser = $issue['page']['teaser'];
          // Update Field data 
          $node->field_issue_name['und'][0]['value'] = $title;
          $node->field_sppx_id['und'][0]['value'] = $id;
          $node->field_sppx_uuid['und'][0]['value'] = $uuid;
          $node->field_forum_link['und'][0]['value'] = $forum_link;
          $node->field_issue_link['und'][0]['value'] = $issue_link;
          $node->field_portal_link['und'][0]['value'] = $portal_link;
          $node->field_thumbnail_link['und'][0]['title'] = $title;
          $node->field_thumbnail_link['und'][0]['url'] = $thumbnail_link;
          $node->field_type['und'][0]['value'] = $type;
          $node->field_rule['und'][0]['value'] = $rule;
          $node->field_raise_minimum['und'][0]['value'] = $raise_minimum;
          $node->field_raise_maximum['und'][0]['value'] = $raise_maximum;
          $node->field_raise_target['und'][0]['value'] = $raise_target;
          $node->field_raised['und'][0]['value'] = $raised;
          $node->field_invest['und'][0]['value'] = $invest;
          $node->field_lotsize['und'][0]['value'] = $lotsize;
          $node->field_request['und'][0]['value'] = $request;
          $node->field_status['und'][0]['value'] = $status;
          $node->field_start_date['und'][0]['value'] = $date_start; //date('Y-m-d h:i:s', strtotime($date_start));
          $node->field_end_date['und'][0]['value'] = $date_end;//date('Y-m-d h:i:s', strtotime($date_end));
          $node->field_target_date['und'][0]['value'] = $date_target;//date('Y-m-d h:i:s', strtotime($date_target));
          $node->field_caveat_copyright['und'][0]['value'] = base64_decode($caveat_copyright);
          $node->field_caveat_warning['und'][0]['value'] = base64_decode($caveat_warning);
          $node->field_teaser['und'][0]['value'] = base64_decode($teaser);
          $node->field_accredited['und'][0]['value'] = $accredited;
          $node->field_reviewed['und'][0]['value'] = $reviewed; 
          $node->field_visibility['und'][0]['value'] = $visibility;  
        }
      }
    }
  }

}

/** 
 * Custom sppx login form
*/
function crowdfunding_campaign_sppx_login_form($form, $form_state) {

  $form['sppx_username'] = array(
    '#type' => 'textfield',
    '#title' => t('SPPX username'),
    '#required' => TRUE,
    '#attributes' => array('class' => array('sppx-username')),
  );
  $form['sppx_pass'] = array(
    '#title' => t('SPPX password'),
    '#type' => 'password',
    '#required' => TRUE,
    '#password_toggle' => TRUE
  );
  $form['sppx_login_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Verify'),
  );
  
  return $form;
}

/**
 * SPPX login form validate
  */
function crowdfunding_campaign_sppx_login_form_validate(&$form, $form_state) {

  $sppx_username = $form_state['input']['sppx_username'];
  $sppx_pass = $form_state['input']['sppx_pass'];
  if(!empty($sppx_username) && !empty($sppx_pass)){
    $response = get_crowdfunding_campaign_sppx_login($sppx_username, $sppx_pass);
    if($response->code != '200'){
      $response_json = $response->data;
      $response_data = json_decode($response_json, TRUE);
      $error_message = $response_data['status']['memo'];
      form_set_error('sppx_account', t($error_message));
    }
  }

}

/**
 * SPPX login through API
 * @param username
 * @param password
 * @return http-response 
  */
function get_crowdfunding_campaign_sppx_login($username, $password){

    $query_params = 'username='.$username.'&'.'password='.$password;
    $request_uri = 'https://test.sppx.io/api/v0/user/login?'.$query_params;
    $response = backdrop_http_request($request_uri); 
    return $response;
}

/**
 * SPPX session logout through API
 * @param access_token
 * @return http-response 
  */
  function logout_crowdfunding_campaign_sppx_session($access_token){
    $request_uri = 'https://test.sppx.io/api/v0/user/logout';
    $headers = array('Authorization' => 'Bearer '.$access_token,
                    'Accept' => 'application/vnd.api+json',
                    'Content-Type' => 'application/vnd.api+json',
                    'cache-control' => 'no-cache');
    $options = array('headers' => $headers);
    $response = backdrop_http_request($request_uri, $options); 
    return $response;
}


/** 
 * SPPX login form submit
*/
function crowdfunding_campaign_sppx_login_form_submit(&$form, $form_state) {

  $sppx_username = $form_state['input']['sppx_username'];
  $sppx_pass = $form_state['input']['sppx_pass'];
  $response = get_crowdfunding_campaign_sppx_login($sppx_username, $sppx_pass);
  if($response->code == '200'){
    if ($response->data){
      $response_json = $response->data;
      $response_data = json_decode($response_json, TRUE);
      $access_token = $response_data['token']['access_token'];
      $refresh_token = $response_data['token']['refresh_token'];
      // Store sppx access_token and refresh_token  in session
      if(!isset($_SESSION)) 
      { 
        session_start(); 
      } 
      unset($_SESSION['sppx']);
      $_SESSION['sppx']['access_token'] = $access_token;
      $_SESSION['sppx']['refresh_token'] = $refresh_token;
      $success_message = t("You have successfully verified your SPPX account");
      backdrop_set_message($success_message, 'status');
    }
  }
}

/**  
 * Check if SPPX user is verified or not
 */

 function is_sppx_user_verified(){
   if (isset($_SESSION['sppx']['access_token'])){
    return TRUE;
   }
   return FALSE;
 }

 /** 
  * Implements hook_preprocess_node()
 */
function crowdfunding_campaign_preprocess_node(&$variables){
  
  if(isset($variables['node']) && $variables['node']->type == 'campaign'){
    $variables['sppx_login_form'] = backdrop_get_form('crowdfunding_campaign_sppx_login_form');
  }
}

/** 
 * Implements hook_form_FORM_ID_alter()
*/

function crowdfunding_campaign_form_campaign_node_form_alter(&$form, $form_state, $form_id) {

  global $user;
  $campaign_fields = array('issue_name',
                           'sppx_id',
                           'issue_link',
                           'portal_link',
                           'forum_link',
                           'thumbnail_link',
                            'type',
                            'rule',
                            'raise_minimum',
                            'raise_maximum',
                            'raise_target',
                            'raised',
                            'lotsize',
                            'request',
                            'accredited',
                            'reviewed',
                            'status',
                            'start_date',
                            'end_date',
                            'target_date',
                            'caveat_copyright',
                            'caveat_warning',
                            'teaser',
                            'invest',
                            'visibility',
                            'body'
                          );

  $form['field_sppx_uuid']['#weight'] = 1;
  $form['field_hero_image']['#weight'] = 2;
  foreach($campaign_fields as $campaign_field){
    if($campaign_field == 'body'){
      $form[$campaign_field]['#access'] = FALSE;
    }
    $form['field_'.$campaign_field]['#access'] = FALSE;
  }
  // Added default max to avoid maximum validation for this integer field
  $form['field_raise_maximum']['und'][0]['value']['#max'] = '1000000000000';
  if ($user->uid == 1){
    $form['field_fieldgroup'] = array(
      '#type' => 'fieldset',
      '#title' => t('Additional data'),
      '#weight' => 3,
      '#collapsible' => true,
      '#collapsed' => true,
    );
    foreach($campaign_fields as $campaign_field){
      $form['field_fieldgroup']['field_'.$campaign_field] = $form['field_'.$campaign_field];
      $form['field_fieldgroup']['field_'.$campaign_field]['#access'] = TRUE;
    }
  }

}

/**
 * Implements hook_block_info().
 *
 */
function crowdfunding_campaign_block_info() {
 
  $blocks['sppx_user_session'] = array(
    // info: The name of the block.
    'info' => t('SPPX session'),
    'description' => 'Block to show sppx session information and logout button',
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 */
function crowdfunding_campaign_block_view($delta = '', $settings = array(), $contexts = array()) {
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'sppx_user_session':
      $block['subject'] = t('SPPX session');
      $block['content'] = get_sppx_user_session();
      break;
  }
  return $block;
}

/**  
 * Get SPPX user session data 
 */

function get_sppx_user_session(){

  if(!isset($_SESSION)) 
  { 
    session_start(); 
  }
  $access_token = Null;
  if (!empty($_SESSION['sppx'])){
    $access_token = $_SESSION['sppx']['access_token'];
  }
  return theme('sppx_session_info', array('access_token' => $access_token));
}

/**
 * Implements hook_theme().
 */
function crowdfunding_campaign_theme($existing, $type, $theme, $path) {

  $custom_theme = array();
  $custom_theme['sppx_session_info'] = array(
    'template' => 'block-sppx-session-info',
    'path' => backdrop_get_path('module', 'crowdfunding_campaign') . '/templates',
    'variables' => array('access_token' => Null)
  );
  
  return $custom_theme;
}

/**  
 * Logout SPPX session 
 */

 function logout_sppx_session(){

  if(!isset($_SESSION)){
    session_start(); 
  }
  if (!empty($_SESSION['sppx'])){
    $access_token = $_SESSION['sppx']['access_token'];
  }
  $response = logout_crowdfunding_campaign_sppx_session($access_token);
  $response_json = $response->data;
  $response_data = json_decode($response_json, TRUE);
  $response_code =  $response_data['status']['code'];
  // Clear sppx session data 
  unset($_SESSION['sppx']);
  $success_message = t("You have successfully logged out");
  backdrop_set_message($success_message, 'status');
  return backdrop_json_output($response_json);
 }


/** 
 * Check SPPX token status if already expired or not
 * For now we use logout API to get the status. There should have a separate API to check 
 * access token status.
 * TODO - Fix it later with appropriate API
*/

function check_sppx_access_token_status(){

  if(!isset($_SESSION)){
    session_start(); 
  }
  if (!empty($_SESSION['sppx'])){
    $access_token = $_SESSION['sppx']['access_token'];
  }
  $data = array();
  $response = logout_crowdfunding_campaign_sppx_session($access_token);
  $response_json = $response->data;
  $response_data = json_decode($response_json, TRUE);
  $response_code =  $response_data['status']['code'];
  $data['code'] = $response_code;
  if($response_code == '401'){
    // Clear sppx session data
    unset($_SESSION['sppx']);
    $data['code'] = $response_code;
    $data['reason'] = $response_data['status']['reason'];
    $data['message'] = $response_data['status']['memo'];
  }
  return backdrop_json_output(json_encode($data));
}


/** 
 * Pledge SPPX Invest 
*/

function pledge_sppx_invest($issue_uuid){

  if(!isset($_SESSION)){
    session_start(); 
  }
  if (!empty($_SESSION['sppx'])){
    $access_token = $_SESSION['sppx']['access_token'];
  }
  $request_uri = 'https://test.sppx.io/api/v0/issue/'.$issue_uuid.'/pledge';
  $headers = array('Authorization' => 'Bearer '.$access_token,
                  'Accept' => 'application/vnd.api+json',
                  'Content-Type' => 'application/vnd.api+json',
                  'cache-control' => 'no-cache');
  $options = array('headers' => $headers);
  $response = backdrop_http_request($request_uri, $options); 
  $response_json = $response->data;
  $response_data = json_decode($response_json, TRUE);
  return $response_data;
}